page-stopwatch
  div.h10per.sticky.t0.l0.f.fh.h10per.z1.bg-white
    module-header.w-full(title='STOP WATCH', back='{true}')
  
  //- コンテンツ
  div.flex.fh.flex-column.h90per
    div.f.flex-column.w-full.fs20.text-center.pt30.px30
      div.f.fh.cursor-pointer(onclick='{toggleOpen}')
        div.px20 {setTime ? setTime + "秒チャレンジ": "秒数を選択"}
        div.t0.r0.fs20.material-icons.transition {selectOpen ? "keyboard_arrow_up":"keyboard_arrow_down"}
      div(each='{item in opts.time}', if='{selectOpen}', onclick='{selectSeconds}') {item.seconds}
    div.fs20.text-center.pt30 ±{opts.difficulty.seconds}秒以内で成功！
    div.h-full.overflow-scroll(ref='body')
      div.container.f.fh.flex-column.p30
        div.timer.fs26.pb30 {timer ? this.timer: "00:00.000"}
        div
          div.start.button.text-white(onclick='{start}', class='{measuring && !stopTimer ? "bg-weak" : "bg-pink"}') Start
          div.stop.button.text-white(onclick='{stop}', class='{measuring ? "bg-pink" : "bg-weak"}') Stop
          div.reset.button.text-white(onclick='{reset}', class='{!measuring && stopTimer ? "bg-pink" : "bg-weak"}') Reset

  script.
    this.on('mount', () => {
    });

    this.on('show', () => {
      this.timer = false;
    });

    this.on('hide', () => {
      this.stop();
      this.reset();
      this.setTime = false;
    });

    //- ダミー
    this.opts.time = [
      {
        seconds : "5",
        setting_time : "5000",
      },
      {
        seconds : "10",
        setting_time : "10000",
      },
      {
        seconds : "15",
        setting_time : "15000",
      },
      {
        seconds : "20",
        setting_time : "20000",
      },
      {
        seconds : "30",
        setting_time : "30000",
      },
    ];

    this.opts.difficulty =
      {
        level : "1",
        seconds : "1",
        border_time : 1000,
      };

    //- 見た目
    this.toggleOpen = () => {
      this.selectOpen = !this.selectOpen;
      this.update();
    };

    this.selectSeconds = (e) => {
      this.setTime = e.item.item.seconds;
      this.setting_time = e.item.item.setting_time;
      if (this.setTime) {
        this.selectOpen = false;
      }
      this.update();
    };


    //- タイマー系
    var startTime;
    var timeoutId;
    var elapsedTime = 0;
    var d;
    var m;
    var s;
    var ms;

    this.countUp = () => {
      d = new Date(Date.now() - startTime + elapsedTime);
      m = String(d.getMinutes()).padStart(2, 0);
      s = String(d.getSeconds()).padStart(2, 0);
      ms = String(d.getMilliseconds()).padStart(3, 0);
      this.timer = `${m}:${s}.${ms}`;
      this.update();
      timeoutId = setTimeout(() => {
        this.countUp();
      }, 10);
    };

    this.start = () => {
      //- 秒数選択前は押せなくする
      if (!this.setTime) return;
      //- 計測中は押せなくする
      if (this.measuring) return;

      startTime = Date.now();
      this.measuring = true;
      this.stopTimer = false;
      this.countUp();
    };

    this.stop = () => {
      //- ストップ中は押せなくする
      if (!this.measuring) return;

      clearTimeout(timeoutId);
      //- 秒に誤差が出ないようelapsedTimeからthis.timerを書き換え
      elapsedTime += Date.now() - startTime;
      var strTimer = String(elapsedTime);
      if (strTimer.length === 4) {
        s = strTimer.slice(-4, 1).padStart(2, 0);
      } else if (strTimer.length === 5) {
        s = strTimer.slice(-5, 2).padStart(2, 0);
      }
      ms = strTimer.slice(-3).padStart(3, 0);
      this.timer = false;
      this.timer = `${m}:${s}.${ms}`;
      //- 状態変更
      this.measuring = false;
      this.stopTimer = true;
      this.update();

      //- クリア判定
      var check_time = Math.abs(elapsedTime - this.setting_time);
      if (check_time <= this.opts.difficulty.border_time) {
        this.clear = true;
        spat.modal.alert("成功！！");
      } else {
        this.stop();
        this.reset();
        spat.modal.alert("失敗");
      }
    };

    this.reset = () => {
      //- 計測中は押せなくする
      if (this.measuring) return;

      this.timer = false;
      this.measuring = false;
      this.stopTimer = false;
      elapsedTime = 0;
      this.update();
    };
