page-stopwatch
  div.h10per.sticky.t0.l0.f.fh.h10per.z1.bg-white
    module-header.w-full(title='STOP WATCH', back='{timer ? "" : true}')
  
  //- コンテンツ
  div.flex.fh.flex-column.h90per.px30
    div.f.flex-column.w-full.fs20.text-center.pt30
      div.button.text-white(onclick='{openLimit}', class='{seconds ? "bg-weak":"bg-pink"}') 難易度選択
      div.pt30.bold(if='{seconds}') 目標タイム:{seconds.seconds}秒
    
    div.fs18.pt30 Level:{opts.difficulty[current].level}
    div.fs20.text-center.pt10 ±{opts.difficulty[current].seconds}秒以内で成功！
    div.s-full.overflow-scroll(ref='body')
      div.container.f.fh.flex-column.py30
        div.timer.relative.fs60.mb30 {!timer ? "00:00.000" : timerhide ? timerhide : timer}
        div.f.flex-around.w-full
          div.start.w-full.button.text-white(onclick='{start}', class='{measuring && !stopTimer ? "bg-weak" : seconds ? "bg-pink" : "bg-weak"}') Start
          div.stop.w-full.button.text-white.mx5(onclick='{stop}', class='{measuring ? "bg-pink" : "bg-weak"}') Stop
          div.reset.w-full.button.text-white(onclick='{reset}', class='{!measuring && stopTimer ? "bg-pink" : "bg-weak"}') Reset

  script.
    this.on('mount', () => {
    });

    this.on('show', () => {
      this.timer = false;
      this.current = 0;
      this.update();
    });

    this.on('hide', () => {
      this.stop();
      this.reset();
      this.seconds = false;
    });

    //- ダミー

    this.opts.difficulty = [
      {
        level : "1",
        seconds : "1",
        border_time : 1000,
      },
      {
        level : "2",
        seconds : "0.5",
        border_time : 500,
      },
      {
        level : "3",
        seconds : "0.25",
        border_time : 250,
      },
      {
        level : "MAX",
        seconds : "0.1",
        border_time : 100,
      },
    ];

    //- タイマー系
    var startTime;
    var timeoutId;
    var elapsedTime = 0;
    var d;
    var m;
    var s;
    var ms;

    this.countUp = () => {
      d = new Date(Date.now() - startTime + elapsedTime);
      m = String(d.getMinutes()).padStart(2, 0);
      s = String(d.getSeconds()).padStart(2, 0);
      ms = String(d.getMilliseconds()).padStart(3, 0);
      var hideTime = Date.now() - startTime;
      if (hideTime < 5000) {
        this.timer = `${m}:${s}.${ms}`;
      } else {
        var hm = Math.floor(Math.random() * 100);
        var hs = Math.floor(Math.random() * 100);
        var hms = Math.floor(Math.random() * 1000);
        this.timerhide = `${hm}:${hs}.${hms}`;
      }
      this.update();
      timeoutId = setTimeout(() => {
        this.countUp();
      }, 10);
    };

    this.start = () => {
      //- 秒数選択前は押せなくする
      if (!this.seconds) return;
      //- 計測中は押せなくする
      if (this.measuring) return;

      startTime = Date.now();
      this.measuring = true;
      this.stopTimer = false;
      this.countUp();
    };

    this.stop = () => {
      //- ストップ中は押せなくする
      if (!this.measuring) return;

      this.timerhide = false;
      clearTimeout(timeoutId);
      //- 秒に誤差が出ないようelapsedTimeからthis.timerを書き換え
      elapsedTime += Date.now() - startTime;
      var strTimer = String(elapsedTime);
      if (strTimer.length === 4) {
        s = strTimer.slice(-4, 1).padStart(2, 0);
      } else if (strTimer.length === 5) {
        s = strTimer.slice(-5, 2).padStart(2, 0);
      }
      ms = strTimer.slice(-3).padStart(3, 0);
      this.timer = false;
      this.timer = `${m}:${s}.${ms}`;
      //- 状態変更
      this.measuring = false;
      this.stopTimer = true;
      this.update();
      this.checkClear(elapsedTime, this.timer);
    };

    this.reset = () => {
      //- 計測中は押せなくする
      if (this.measuring) return;

      this.timer = false;
      this.measuring = false;
      this.stopTimer = false;
      elapsedTime = 0;
      this.update();
    };

      //- クリア判定
    this.checkClear = (elapsedTime, resultTime) => {
      var check_time = Math.abs(elapsedTime - this.seconds.setting_time);
      if (check_time <= this.opts.difficulty[this.current].border_time) {
        this.clear = true;
        if (this.current < 3){
          this.current++;
          spat.modal.alert('【記録】' + resultTime + '秒' + '\n' + '成功！！');
        } else {
          spat.modal.alert("congratulations!!!");
          this.current = 0;
        }
        this.stop();
        this.reset();
      } else {
        this.stop();
        this.reset();
        this.current = 0;
        spat.modal.alert('【記録】' + resultTime + '秒' + '\n' + '失敗');
      }
    };

    //- リミット選択モーダル
    this.openLimit = () => {
      var modal = spat.modal.open('modal-selectlimit');
      
      //- modal-selectlimitが閉じると発火
      modal.on('setLimit', (seconds) => {
        this.seconds = seconds;
        this.update();
      });
    };


